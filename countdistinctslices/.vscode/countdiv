//codility countdiv solution, 100%
//https://app.codility.com/demo/results/trainingU763FQ-QA2/
//I think there must be a better way...however, it still works 100%


#include <iostream> /* console stuff */
#include <cstdlib>  /* standard lib */
#include <string>
#include <cstring>
#include <limits>   
#include <vector>  /*when size of array not known, can use push_back, for example */
#include <sstream> /* string streams */
#include <numeric> /* sequences of values */
#include <ctime>   /* time, baby */
#include <cmath>   /* numbers, yo */
#include <assert.h>  /* assertions */
#include <functional>
#include <bits/stdc++.h>

using namespace std; 

void output(string str){
  cout<<str << endl;
}; 

 


int solution(int A, int B, int K){
    
    //output(to_string(K));
    unsigned int n=0;
    unsigned int index = 0; 
    unsigned int count = 0;
   // output("A = " + to_string(A)); 
  //  output("B = " + to_string(B)); 
  //  output("K = " + to_string(K)); 
    
    
    if (K > B){ 
         
        
        if(A==0){n++;}
         //output("number divisible = " + to_string(n));   
        return n;
    };  //K = 10; B = 9;
    
   count = B-A;

    if (K==1){
        n= count+1;
       // output("K == 1number divisible = " + to_string(n));   
        return n;
    };  //if divisible by 1 return count of array elements  
     
    
    /*while(A % K !=0){   //find first index;
      A++;
    }*/
    
    if (K>=A){
      index = K-A;   //move directly to the index of A as it will be the same as K
      if(A==0){n++;} //but note that if 0 then increment total, as zero, div by k counts
    } 
    else 
    {
     while((A % K !=0) & (A <= B)){   //find first index;
     // output("index = " + to_string(index)); 
      index++;
      A++; 
     };
    } 
 
     for (unsigned int i = index; i <= count; i+=K){
        //output("i = " + to_string(i)); 
        //output("K = " + to_string(K)); 
        //output("i+K = " + to_string(i+K)); 
       
       {n++;}
      // output("index = " + to_string(i)); 

      }
     
    
    //output("number divisible = " + to_string(n));  
    return n;      
}  
