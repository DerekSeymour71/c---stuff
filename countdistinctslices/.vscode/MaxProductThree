
#include <cstdlib>  /* standard lib */
#include <string>
#include <cstring>
#include <limits>   
#include <vector>  /*when size of array not known, can use push_back, for example */
#include <sstream> /* string streams */
#include <numeric> /* sequences of values */
#include <ctime>   /* time, baby */
#include <cmath>   /* numbers, yo */
#include <assert.h>  /* assertions */
#include <functional>
#include <bits/stdc++.h>

using namespace std; 

void output(string str){
  cout<<str << endl;
}; 

 

long int MinThree(long long int A, long long int B, long long int C){
  return  min(A,min(B,C));
}

long int MaxThree(long long int A, long long int B, long long int C){
  return  max(A,max(B,C));
}


 void SetMaxThree(long long int &A, long long int &B, long long int &C, long long int Value ){ 
    long int min = MinThree(A,B,C);
    if ((min == A) & (Value > A)){ 
       A = Value;}
    else if ((min ==B) & (Value > B))
      B = Value; 
    else if ((min==C) & (Value > C))
      C= Value;  
 }

  

void SetMinThree(long long int &A, long long int &B, long long int &C, long long int Value ){ 
    long int max = MaxThree(A,B,C);
    if ((max == A) & (Value < A)){ 
       A = Value;}
    else if ((max ==B) & (Value < B))
      B = Value; 
    else if ((max==C) & (Value < C))
      C= Value;  
 }


 long long int MiddleThree(long long int X,long long int Y, long long int Z) 
 {
    
   return max(min(X,Y), min(max(X,Y),Z));
 }  
  
 

int solution(vector<int> &A){
  long long int X,Y,Z; //max three
  long long int P,Q,R; //min three;
  long long int MinMaxA,MinMaxB;
  long long int i;
  long long int size;
  long long int SumA,SumB;
   
    X = A[0];
    Y = A[1];
    Z = A[2];
    P = X;
    Q = Y;
    R = Z;
    size = A.size();

    MinMaxA = min(P,min(Q,R));
    MinMaxB = MiddleThree(P,Q,R);
    for (i = 3; i<size; i++){ 
      SetMaxThree(X,Y,Z,A[i]);
      SetMinThree(P,Q,R,A[i]);
      MinMaxA = min(P,min(Q,R));
      MinMaxB = MiddleThree(P,Q,R);
    } 
    SumA = X*Y*Z;
    SumB = MaxThree(X,Y,Z) * MinMaxA * MinMaxB;
 
    return max(SumA,SumB);  
   
}

int main(){
   vector<int>  A = {0, 0, 0, 0, 0,0};           // 0    //all zero
   vector<int>  B= {-5, 5, -5, 4,3,4};          // 125   //mix of negative and positive
   vector<int> C  = {-5, -5, -5, -5,-5,-5};      // -125  //all negative
   vector<int> D = {-5, -5, -5};                // -125  //negative triplet
   vector<int> E  = {-5, -5, 5};                 // 125   //1 positive, and 2 negatives
   vector<int> F  = {-5, 5, 5};                  // -125  //2 positives 1 negative
  vector<int>  G = { -5, 5, 5, 5};               // 125   //1 negative, 3 positve
  vector<int>  H  = {5,4,-3,-2};                 // 30   //mix
   vector<int> I  = {-10, -2, -4};               // -80   //small triplet
   vector<int> J  = {-5, -5, 5,5};               // 125   //two negative, two positives
   vector<int> K  = {-5, -5,-4,10,-2,-3,-5,-6,-11,-12};               // 1320   //1 positive, rest negative
   vector<int> L  = {2, 4,4,10,2,3,5,6,11,12};               // 1320   //all positive
   vector<int> M = {-5, -6, -4, -7, -10};              //-120
   vector<int> N  = {-4, -6, 3, 4, 5};                 //120
   vector<int> O  = {1000, 1000, 1000};

  
   output("A sum = "  + to_string(solution(A)));
   output("B sum = "  + to_string(solution(B)));
   output("C sum = "  + to_string(solution(C)));
   output("D sum = "  + to_string(solution(D)));
   output("E sum = "  + to_string(solution(E)));
   output("F sum = "  + to_string(solution(F))); 
   output("G sum = "  + to_string(solution(G)));
   output("H sum = "  + to_string(solution(H)));
   output("I sum = "  + to_string(solution(I)));
   output("J sum = "  + to_string(solution(J)));
   output("K sum = "  + to_string(solution(K)));
   output("L sum = "  + to_string(solution(L)));
   output("M sum = "  + to_string(solution(M)));
   output("N sum = "  + to_string(solution(N)));
   output("O sum = "  + to_string(solution(O)));
}
 
