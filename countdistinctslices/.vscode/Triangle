// test results https://app.codility.com/demo/results/trainingZN9U6X-AZG/
/*An array A consisting of N integers is given. A triplet (P, Q, R) is triangular if 0 â‰¤ P < Q < R < N and:

10     = 2      = 5            5   10   2,     2   5  10


1,2,3  = triangle? 


A[P] + A[Q] > A[R],
A[P] + A[R] > A[Q].


A[Q] + A[R] > A[P],
 
P  conditions indexing
 
 (A[i] + A[i+1] > A[i+2])  & A[i] + A[i+2] > A[i+1];

 Q conditions indexing
  
 A[i+1] + A[i+2] > A[i]

  
 given a sum, what sums make a triangle? 
  
 The Triangle Inequality Theorem states that the sum of any 2 sides of a triangle must be greater than the measure of the third side

 A = 1
 B = 2
 C = 3 

A[P] + A[Q] > A[R],
A[P] + A[R] > A[Q].


A[Q] + A[R] > A[P],




#include <iostream> /* console stuff */
#include <cstdlib>  /* standard lib */
#include <string>
#include <cstring>
#include <limits>   
#include <vector>  /*when size of array not known, can use push_back, for example */
#include <sstream> /* string streams */
#include <numeric> /* sequences of values */
#include <ctime>   /* time, baby */
#include <cmath>   /* numbers, yo */
#include <assert.h>  /* assertions */
#include <functional>
#include <bits/stdc++.h>

using namespace std; 

void output(string str){
  cout<<str << endl;
}; 

 
bool IsTriangle(long long int P, long long int Q, long long int R){ 
  return (P+Q) > R;
}


int solution(vector<int> &A){
  long int size = A.size();
  long int i; 
  //if (size==3) return IsTriangle(A[0],A[1],A[2]);  //edge case of 3 elements. removed as causes buffer overflow with last edge case
  
  sort(A.begin(),A.end()); //sprt from 3 onwards
  for(i=0;i<size-2;i++){
     if (IsTriangle(A[i],A[i+1],A[i+2])) return 1;

  }

  return 0; //no triangle found

}


int main(){
   vector<int>  A = {10,2 ,5, 1 ,8,20};
   vector<int>  B = {10, 50, 5, 1};  //1,5,10,50
   vector<int>  C = {10, -2147483648, -2147483648};
   output("triangle : " + to_string(solution(A)));
   output("triangle : " + to_string(solution(B)));
   output("triangle : " + to_string(solution(C)));
   
}
